import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { MixedType } from './MixedType';
export var StringType = /*#__PURE__*/function (_MixedType) {
  _inheritsLoose(StringType, _MixedType);

  function StringType(errorMessage) {
    var _this;

    _this = _MixedType.call(this, 'string') || this;

    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {
      onValid: function onValid(v) {
        return typeof v === 'string';
      },
      errorMessage: errorMessage || _this.locale.type
    });

    return _this;
  }

  var _proto = StringType.prototype;

  _proto.containsLetter = function containsLetter(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.containsLetter;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return /[a-zA-Z]/.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.containsUppercaseLetter = function containsUppercaseLetter(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.containsUppercaseLetter;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return /[A-Z]/.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.containsLowercaseLetter = function containsLowercaseLetter(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.containsLowercaseLetter;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return /[a-z]/.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.containsLetterOnly = function containsLetterOnly(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.containsLetterOnly;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return /^[a-zA-Z]+$/.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.containsNumber = function containsNumber(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.containsNumber;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return /[0-9]/.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.isOneOf = function isOneOf(values, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.isOneOf;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return !!~values.indexOf(v);
      },
      errorMessage: errorMessage,
      params: {
        values: values
      }
    });

    return this;
  };

  _proto.isEmail = function isEmail(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.isEmail;
    }

    // http://emailregex.com/
    var regexp = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return regexp.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.isURL = function isURL(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.isURL;
    }

    var regexp = new RegExp("^(?!mailto:)(?:(?:http|https|ftp)://|//)(?:\\S+(?::\\S*)?@)?(?:(?:(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[0-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]+-?)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))|localhost)(?::\\d{2,5})?(?:(/|\\?|#)[^\\s]*)?$", 'i');

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return regexp.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.isHex = function isHex(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.isHex;
    }

    var regexp = /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i;

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return regexp.test(v);
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.pattern = function pattern(regexp, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.pattern;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(v) {
        return regexp.test(v);
      },
      errorMessage: errorMessage,
      params: {
        regexp: regexp
      }
    });

    return this;
  };

  _proto.rangeLength = function rangeLength(minLength, maxLength, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.rangeLength;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return value.length >= minLength && value.length <= maxLength;
      },
      errorMessage: errorMessage,
      params: {
        minLength: minLength,
        maxLength: maxLength
      }
    });

    return this;
  };

  _proto.minLength = function minLength(_minLength, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.minLength;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return Array.from(value).length >= _minLength;
      },
      errorMessage: errorMessage,
      params: {
        minLength: _minLength
      }
    });

    return this;
  };

  _proto.maxLength = function maxLength(_maxLength, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.maxLength;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return Array.from(value).length <= _maxLength;
      },
      errorMessage: errorMessage,
      params: {
        maxLength: _maxLength
      }
    });

    return this;
  };

  return StringType;
}(MixedType);
export default function getStringType(errorMessage) {
  return new StringType(errorMessage);
}