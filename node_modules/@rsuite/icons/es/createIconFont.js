import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import classNames from 'classnames';
import Icon from './Icon';
import { inBrowserEnv, defaultClassPrefix } from './utils';
import { useMemo } from 'react';
var cache = new Set();

function isValidScriptUrl(scriptUrl) {
  return typeof scriptUrl === 'string' && scriptUrl.length && !cache.has(scriptUrl);
}

function insertScripts(scriptUrls, index, loadedCallback) {
  if (index === void 0) {
    index = 0;
  }

  var nextIndex = index + 1;
  var currentScriptUrl = scriptUrls[index];

  var loadNextScript = function loadNextScript() {
    insertScripts(scriptUrls, nextIndex, loadedCallback);
  };

  if (isValidScriptUrl(currentScriptUrl)) {
    var script = document.createElement('script');
    script.setAttribute('src', currentScriptUrl);
    script.setAttribute('data-prop', 'icon-font');

    if (scriptUrls.length > nextIndex) {
      script.onload = loadNextScript;
      script.onerror = loadNextScript;
    }

    cache.add(currentScriptUrl);
    document.body.appendChild(script);
  } else if (scriptUrls.length > nextIndex) {
    loadNextScript();
  }

  if (nextIndex >= scriptUrls.length && typeof loadedCallback === 'function') {
    loadedCallback();
  }
}

function createIconFont(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      scriptUrl = _ref.scriptUrl,
      _ref$commonProps = _ref.commonProps,
      commonProps = _ref$commonProps === void 0 ? {} : _ref$commonProps,
      onLoaded = _ref.onLoaded;

  if (scriptUrl && inBrowserEnv()) {
    var scriptUrls = Array.isArray(scriptUrl) ? scriptUrl : [scriptUrl];
    insertScripts(scriptUrls.reverse(), 0, onLoaded);
  }

  var IconFont = /*#__PURE__*/React.forwardRef(function (props, ref) {
    var icon = props.icon,
        children = props.children,
        className = props.className,
        restProps = _objectWithoutPropertiesLoose(props, ["icon", "children", "className"]);

    var clesses = classNames(className, commonProps.className, defaultClassPrefix('icon-font'));
    /**
     * Children will overwrite <use />
     */

    var content = useMemo(function () {
      if (children) {
        return children;
      }

      if (icon) {
        return /*#__PURE__*/React.createElement("use", {
          xlinkHref: "#" + icon
        });
      }
    }, [icon, children]);
    return /*#__PURE__*/React.createElement(Icon, _extends({}, commonProps, restProps, {
      className: clesses,
      ref: ref
    }), content);
  });
  IconFont.displayName = 'IconFont';
  return IconFont;
}

export default createIconFont;