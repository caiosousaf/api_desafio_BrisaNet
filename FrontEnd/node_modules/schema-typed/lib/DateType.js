"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports["default"] = getDateType;
exports.DateType = void 0;

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _MixedType2 = require("./MixedType");

var DateType = /*#__PURE__*/function (_MixedType) {
  (0, _inheritsLoose2["default"])(DateType, _MixedType);

  function DateType(errorMessage) {
    var _this;

    _this = _MixedType.call(this, 'date') || this;

    _MixedType.prototype.pushRule.call((0, _assertThisInitialized2["default"])(_this), {
      onValid: function onValid(value) {
        return !/Invalid|NaN/.test(new Date(value).toString());
      },
      errorMessage: errorMessage || _this.locale.type
    });

    return _this;
  }

  var _proto = DateType.prototype;

  _proto.range = function range(min, max, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.range;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return new Date(value) >= new Date(min) && new Date(value) <= new Date(max);
      },
      errorMessage: errorMessage,
      params: {
        min: min,
        max: max
      }
    });

    return this;
  };

  _proto.min = function min(_min, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.min;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return new Date(value) >= new Date(_min);
      },
      errorMessage: errorMessage,
      params: {
        min: _min
      }
    });

    return this;
  };

  _proto.max = function max(_max, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.max;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return new Date(value) <= new Date(_max);
      },
      errorMessage: errorMessage,
      params: {
        max: _max
      }
    });

    return this;
  };

  return DateType;
}(_MixedType2.MixedType);

exports.DateType = DateType;

function getDateType(errorMessage) {
  return new DateType(errorMessage);
}