import _extends from "@babel/runtime/helpers/esm/extends";
import formatErrorMessage from './formatErrorMessage';
/**
 * Create a data asynchronous validator
 * @param data
 */

export function createValidatorAsync(data, name) {
  function check(errorMessage) {
    return function (checkResult) {
      if (checkResult === false) {
        return {
          hasError: true,
          errorMessage: errorMessage
        };
      } else if (typeof checkResult === 'object' && (checkResult.hasError || checkResult.array)) {
        return checkResult;
      }

      return null;
    };
  }

  return function (value, rules) {
    var promises = rules.map(function (rule) {
      var onValid = rule.onValid,
          errorMessage = rule.errorMessage,
          params = rule.params;
      return Promise.resolve(onValid(value, data, name)).then(check(formatErrorMessage(errorMessage, _extends({}, params, {
        name: Array.isArray(name) ? name.join('.') : name
      }))));
    });
    return Promise.all(promises).then(function (results) {
      return results.find(function (item) {
        return item && (item === null || item === void 0 ? void 0 : item.hasError);
      });
    });
  };
}
export default createValidatorAsync;