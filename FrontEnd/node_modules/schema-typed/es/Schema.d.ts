import { SchemaDeclaration, SchemaCheckResult, CheckResult, PlainObject } from './types';
export declare class Schema<DataType = any, ErrorMsgType = string> {
    readonly spec: SchemaDeclaration<DataType, ErrorMsgType>;
    private data;
    constructor(schema: SchemaDeclaration<DataType, ErrorMsgType>);
    getFieldType<T extends keyof DataType>(fieldName: T): SchemaDeclaration<DataType, ErrorMsgType>[T];
    getKeys(): string[];
    setSchemaOptionsForAllType(data: PlainObject): void;
    checkForField<T extends keyof DataType>(fieldName: T, data: DataType): CheckResult<string | ErrorMsgType>;
    checkForFieldAsync<T extends keyof DataType>(fieldName: T, data: DataType): Promise<CheckResult<ErrorMsgType | string>>;
    check<T extends keyof DataType>(data: DataType): SchemaCheckResult<DataType, ErrorMsgType>;
    checkAsync<T extends keyof DataType>(data: DataType): Promise<SchemaCheckResult<DataType, ErrorMsgType>>;
}
export declare function SchemaModel<DataType = PlainObject, ErrorMsgType = string>(o: SchemaDeclaration<DataType, ErrorMsgType>): Schema<DataType, ErrorMsgType>;
export declare namespace SchemaModel {
    var combine: <DataType = any, ErrorMsgType = string>(...specs: Schema<any, ErrorMsgType>[]) => Schema<DataType, ErrorMsgType>;
}
