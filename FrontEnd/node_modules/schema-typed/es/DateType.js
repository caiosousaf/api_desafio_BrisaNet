import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { MixedType } from './MixedType';
export var DateType = /*#__PURE__*/function (_MixedType) {
  _inheritsLoose(DateType, _MixedType);

  function DateType(errorMessage) {
    var _this;

    _this = _MixedType.call(this, 'date') || this;

    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {
      onValid: function onValid(value) {
        return !/Invalid|NaN/.test(new Date(value).toString());
      },
      errorMessage: errorMessage || _this.locale.type
    });

    return _this;
  }

  var _proto = DateType.prototype;

  _proto.range = function range(min, max, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.range;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return new Date(value) >= new Date(min) && new Date(value) <= new Date(max);
      },
      errorMessage: errorMessage,
      params: {
        min: min,
        max: max
      }
    });

    return this;
  };

  _proto.min = function min(_min, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.min;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return new Date(value) >= new Date(_min);
      },
      errorMessage: errorMessage,
      params: {
        min: _min
      }
    });

    return this;
  };

  _proto.max = function max(_max, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.max;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return new Date(value) <= new Date(_max);
      },
      errorMessage: errorMessage,
      params: {
        max: _max
      }
    });

    return this;
  };

  return DateType;
}(MixedType);
export default function getDateType(errorMessage) {
  return new DateType(errorMessage);
}