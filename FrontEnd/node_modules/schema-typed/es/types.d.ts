import { ArrayType } from './ArrayType';
import { BooleanType } from './BooleanType';
import { DateType } from './DateType';
import { NumberType } from './NumberType';
import { StringType } from './StringType';
import { ObjectType } from './ObjectType';
export declare type TypeName = 'array' | 'string' | 'boolean' | 'number' | 'object' | 'date';
export interface CheckResult<E = string> {
    hasError?: boolean;
    errorMessage?: E | string;
    object?: CheckResult<E>;
    array?: CheckResult<E>[];
}
export declare type ErrorMessageType = string;
export declare type ValidCallbackType<V, D, E> = (value: V, data?: D, filedName?: string | string[]) => CheckResult<E> | boolean;
export declare type PlainObject<T extends Record<string, unknown> = any> = {
    [P in keyof T]: T;
};
export interface RuleType<V, D, E> {
    onValid: ValidCallbackType<V, D, E>;
    errorMessage?: E;
    priority?: boolean;
    params?: any;
}
export declare type CheckType<X, T, E = ErrorMessageType> = X extends string ? StringType<T, E> | DateType<T, E> | NumberType<T, E> : X extends number ? NumberType<T, E> : X extends boolean ? BooleanType<T, E> : X extends Date ? DateType<T, E> : X extends Array<any> ? ArrayType<T, E> : X extends Record<string, unknown> ? ObjectType<T, E> : StringType<T, E> | NumberType<T, E> | BooleanType<T, E> | ArrayType<T, E> | DateType<T, E> | ObjectType<T, E>;
export declare type SchemaDeclaration<T, E = string> = {
    [P in keyof T]: CheckType<T[P], T, E>;
};
export declare type SchemaCheckResult<T, E> = {
    [P in keyof T]: CheckResult<E>;
};
