import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { MixedType } from './MixedType';

function toNumber(value) {
  return +value;
}

export var NumberType = /*#__PURE__*/function (_MixedType) {
  _inheritsLoose(NumberType, _MixedType);

  function NumberType(errorMessage) {
    var _this;

    _this = _MixedType.call(this, 'number') || this;

    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {
      onValid: function onValid(value) {
        return /^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/.test(value + '');
      },
      errorMessage: errorMessage || _this.locale.type
    });

    return _this;
  }

  var _proto = NumberType.prototype;

  _proto.isInteger = function isInteger(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.isInteger;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return /^-?\d+$/.test(value + '');
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.pattern = function pattern(regexp, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.pattern;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return regexp.test(value + '');
      },
      errorMessage: errorMessage,
      params: {
        regexp: regexp
      }
    });

    return this;
  };

  _proto.isOneOf = function isOneOf(values, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.isOneOf;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return values.includes(toNumber(value));
      },
      errorMessage: errorMessage,
      params: {
        values: values
      }
    });

    return this;
  };

  _proto.range = function range(min, max, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.range;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return toNumber(value) >= min && toNumber(value) <= max;
      },
      errorMessage: errorMessage,
      params: {
        min: min,
        max: max
      }
    });

    return this;
  };

  _proto.min = function min(_min, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.min;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return toNumber(value) >= _min;
      },
      errorMessage: errorMessage,
      params: {
        min: _min
      }
    });

    return this;
  };

  _proto.max = function max(_max, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.max;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return toNumber(value) <= _max;
      },
      errorMessage: errorMessage,
      params: {
        max: _max
      }
    });

    return this;
  };

  return NumberType;
}(MixedType);
export default function getNumberType(errorMessage) {
  return new NumberType(errorMessage);
}