import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inheritsLoose from "@babel/runtime/helpers/esm/inheritsLoose";
import { MixedType } from './MixedType';
export var ArrayType = /*#__PURE__*/function (_MixedType) {
  _inheritsLoose(ArrayType, _MixedType);

  function ArrayType(errorMessage) {
    var _this;

    _this = _MixedType.call(this, 'array') || this;

    _MixedType.prototype.pushRule.call(_assertThisInitialized(_this), {
      onValid: function onValid(v) {
        return Array.isArray(v);
      },
      errorMessage: errorMessage || _this.locale.type
    });

    return _this;
  }

  var _proto = ArrayType.prototype;

  _proto.rangeLength = function rangeLength(minLength, maxLength, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.rangeLength;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return value.length >= minLength && value.length <= maxLength;
      },
      errorMessage: errorMessage,
      params: {
        minLength: minLength,
        maxLength: maxLength
      }
    });

    return this;
  };

  _proto.minLength = function minLength(_minLength, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.minLength;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return value.length >= _minLength;
      },
      errorMessage: errorMessage,
      params: {
        minLength: _minLength
      }
    });

    return this;
  };

  _proto.maxLength = function maxLength(_maxLength, errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.maxLength;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(value) {
        return value.length <= _maxLength;
      },
      errorMessage: errorMessage,
      params: {
        maxLength: _maxLength
      }
    });

    return this;
  };

  _proto.unrepeatable = function unrepeatable(errorMessage) {
    if (errorMessage === void 0) {
      errorMessage = this.locale.unrepeatable;
    }

    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(items) {
        var hash = {};

        for (var i in items) {
          if (hash[items[i]]) {
            return false;
          }

          hash[items[i]] = true;
        }

        return true;
      },
      errorMessage: errorMessage
    });

    return this;
  };

  _proto.of = function of(type) {
    _MixedType.prototype.pushRule.call(this, {
      onValid: function onValid(items, data, filedName) {
        var checkResults = items.map(function (value, index) {
          var name = Array.isArray(filedName) ? [].concat(filedName, ["[" + index + "]"]) : [filedName, "[" + index + "]"];
          return type.check(value, data, name);
        });
        var hasError = !!checkResults.find(function (item) {
          return item === null || item === void 0 ? void 0 : item.hasError;
        });
        return {
          hasError: hasError,
          array: checkResults
        };
      }
    });

    return this;
  };

  return ArrayType;
}(MixedType);
export default function getArrayType(errorMessage) {
  return new ArrayType(errorMessage);
}