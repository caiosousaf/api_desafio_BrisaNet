import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import { useClassNames, useInsertStyles } from './utils';
var defaultProps = {
  as: 'svg',
  fill: 'currentColor',
  width: '1em',
  height: '1em'
};

function filterProps(props) {
  var nextProps = {};
  Object.entries(props).forEach(function (_ref) {
    var key = _ref[0],
        value = _ref[1];

    if (typeof value !== 'undefined') {
      nextProps[key] = value;
    }
  });
  return nextProps;
}

var Icon = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _classNames;

  var Component = props.as,
      spin = props.spin,
      pulse = props.pulse,
      flip = props.flip,
      fill = props.fill,
      className = props.className,
      rotate = props.rotate,
      children = props.children,
      viewBox = props.viewBox,
      width = props.width,
      height = props.height,
      style = props.style,
      rest = _objectWithoutPropertiesLoose(props, ["as", "spin", "pulse", "flip", "fill", "className", "rotate", "children", "viewBox", "width", "height", "style"]);

  var _useClassNames = useClassNames(),
      componentClassName = _useClassNames[0],
      addPrefix = _useClassNames[1];

  var classes = classNames(className, componentClassName, (_classNames = {}, _classNames[addPrefix('spin')] = spin, _classNames[addPrefix('pulse')] = pulse, _classNames[addPrefix("flip-" + flip)] = !!flip, _classNames));
  var rotateStyles = {
    msTransform: "rotate(" + rotate + "deg)",
    transform: "rotate(" + rotate + "deg)"
  };
  useInsertStyles();
  var svgProps = filterProps({
    width: width,
    height: height,
    fill: fill,
    viewBox: viewBox,
    className: classes,
    style: rotate ? _extends({}, rotateStyles, style) : style
  });
  return /*#__PURE__*/React.createElement(Component, _extends({
    "aria-hidden": true,
    focusable: false,
    ref: ref
  }, svgProps, rest), children);
});
Icon.displayName = 'Icon';
Icon.defaultProps = defaultProps;
Icon.propTypes = {
  spin: PropTypes.bool,
  pulse: PropTypes.bool,
  rotate: PropTypes.number,
  viewBox: PropTypes.string,
  as: PropTypes.oneOfType([PropTypes.elementType, PropTypes.string]),
  flip: PropTypes.oneOf(['horizontal', 'vertical']),
  fill: PropTypes.string
};
export default Icon;