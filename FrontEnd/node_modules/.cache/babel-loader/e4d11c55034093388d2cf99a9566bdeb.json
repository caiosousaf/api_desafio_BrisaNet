{"ast":null,"code":"/* eslint-disable */\n\n/**\n * @example\n * underscoreName('getList');\n * => get_list\n */\nexport function underscore(string) {\n  return string.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\n/**\n * @example\n * camelize('font-size');\n * => fontSize\n */\n\nexport function camelize(string) {\n  return string.replace(/\\-(\\w)/g, function (_char) {\n    return _char.slice(1).toUpperCase();\n  });\n}\n/**\n * @example\n * camelize('fontSize');\n * => font-size\n */\n\nexport function hyphenate(string) {\n  return string.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\n/**\n * @example\n * merge('{0} - A front-end {1} ','Suite','framework');\n * => Suite - A front-end framework\n */\n\nexport function merge(pattern) {\n  var pointer = 0,\n      i;\n\n  for (i = 1; i < arguments.length; i += 1) {\n    pattern = pattern.split(\"{\" + pointer + \"}\").join(arguments[i]);\n    pointer += 1;\n  }\n\n  return pattern;\n}","map":{"version":3,"names":["underscore","string","replace","toLowerCase","camelize","_char","slice","toUpperCase","hyphenate","merge","pattern","pointer","i","arguments","length","split","join"],"sources":["/home/brisa/Documentos/GitHub/api_desafio_BrisaNet/FrontEnd/node_modules/dom-lib/esm/utils/stringFormatter.js"],"sourcesContent":["/* eslint-disable */\n\n/**\n * @example\n * underscoreName('getList');\n * => get_list\n */\nexport function underscore(string) {\n  return string.replace(/([A-Z])/g, '_$1').toLowerCase();\n}\n/**\n * @example\n * camelize('font-size');\n * => fontSize\n */\n\nexport function camelize(string) {\n  return string.replace(/\\-(\\w)/g, function (_char) {\n    return _char.slice(1).toUpperCase();\n  });\n}\n/**\n * @example\n * camelize('fontSize');\n * => font-size\n */\n\nexport function hyphenate(string) {\n  return string.replace(/([A-Z])/g, '-$1').toLowerCase();\n}\n/**\n * @example\n * merge('{0} - A front-end {1} ','Suite','framework');\n * => Suite - A front-end framework\n */\n\nexport function merge(pattern) {\n  var pointer = 0,\n      i;\n\n  for (i = 1; i < arguments.length; i += 1) {\n    pattern = pattern.split(\"{\" + pointer + \"}\").join(arguments[i]);\n    pointer += 1;\n  }\n\n  return pattern;\n}"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,MAApB,EAA4B;EACjC,OAAOA,MAAM,CAACC,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCC,WAAlC,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,QAAT,CAAkBH,MAAlB,EAA0B;EAC/B,OAAOA,MAAM,CAACC,OAAP,CAAe,SAAf,EAA0B,UAAUG,KAAV,EAAiB;IAChD,OAAOA,KAAK,CAACC,KAAN,CAAY,CAAZ,EAAeC,WAAf,EAAP;EACD,CAFM,CAAP;AAGD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,SAAT,CAAmBP,MAAnB,EAA2B;EAChC,OAAOA,MAAM,CAACC,OAAP,CAAe,UAAf,EAA2B,KAA3B,EAAkCC,WAAlC,EAAP;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASM,KAAT,CAAeC,OAAf,EAAwB;EAC7B,IAAIC,OAAO,GAAG,CAAd;EAAA,IACIC,CADJ;;EAGA,KAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGC,SAAS,CAACC,MAA1B,EAAkCF,CAAC,IAAI,CAAvC,EAA0C;IACxCF,OAAO,GAAGA,OAAO,CAACK,KAAR,CAAc,MAAMJ,OAAN,GAAgB,GAA9B,EAAmCK,IAAnC,CAAwCH,SAAS,CAACD,CAAD,CAAjD,CAAV;IACAD,OAAO,IAAI,CAAX;EACD;;EAED,OAAOD,OAAP;AACD"},"metadata":{},"sourceType":"module"}