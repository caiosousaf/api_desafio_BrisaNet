{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _types = require(\"../types\");\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\n\n\nvar CellSizeAndPositionManager = /*#__PURE__*/function () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n    (0, _classCallCheck2[\"default\"])(this, CellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionData\", {});\n    (0, _defineProperty2[\"default\"])(this, \"_lastMeasuredIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_lastBatchedIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_cellCount\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeGetter\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_estimatedCellSize\", void 0);\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  (0, _createClass2[\"default\"])(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = CellSizeAndPositionManager;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_classCallCheck2","_createClass2","_defineProperty2","_types","CellSizeAndPositionManager","_ref","cellCount","cellSizeGetter","estimatedCellSize","_cellSizeGetter","_cellCount","_estimatedCellSize","key","areOffsetsAdjusted","configure","_ref2","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","_lastMeasuredIndex","getOffsetAdjustment","getSizeAndPositionOfCell","index","Error","concat","lastMeasuredCellSizeAndPosition","getSizeAndPositionOfLastMeasuredCell","offset","size","i","undefined","isNaN","_cellSizeAndPositionData","_lastBatchedIndex","getTotalSize","totalSizeOfMeasuredCells","numUnmeasuredCells","totalSizeOfUnmeasuredCells","getUpdatedOffsetForIndex","_ref3","_ref3$align","align","containerSize","currentOffset","targetIndex","datum","maxOffset","minOffset","idealOffset","Math","max","min","totalSize","getVisibleCellRange","params","start","_findNearestCell","stop","resetCell","_binarySearch","high","low","middle","floor","_exponentialSearch","interval","lastMeasuredIndex"],"sources":["/home/brisa/Documentos/api_desafio_BrisaNet/FrontEnd/node_modules/rsuite/node_modules/react-virtualized/dist/commonjs/Grid/utils/CellSizeAndPositionManager.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _types = require(\"../types\");\n\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\nvar CellSizeAndPositionManager =\n/*#__PURE__*/\nfunction () {\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n  // Used in deferred mode to track which cells have been queued for measurement.\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n    (0, _classCallCheck2[\"default\"])(this, CellSizeAndPositionManager);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeAndPositionData\", {});\n    (0, _defineProperty2[\"default\"])(this, \"_lastMeasuredIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_lastBatchedIndex\", -1);\n    (0, _defineProperty2[\"default\"])(this, \"_cellCount\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_cellSizeGetter\", void 0);\n    (0, _defineProperty2[\"default\"])(this, \"_estimatedCellSize\", void 0);\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  }\n\n  (0, _createClass2[\"default\"])(CellSizeAndPositionManager, [{\n    key: \"areOffsetsAdjusted\",\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: \"getCellCount\",\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: \"getEstimatedCellSize\",\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: \"getLastMeasuredIndex\",\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: \"getOffsetAdjustment\",\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: \"getSizeAndPositionOfCell\",\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error(\"Requested index \".concat(index, \" is outside of range 0..\").concat(this._cellCount));\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n        var offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (size === undefined || isNaN(size)) {\n            throw Error(\"Invalid size returned for cell \".concat(i, \" of value \").concat(size));\n          } else if (size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: offset,\n              size: size\n            };\n            offset += size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: \"getSizeAndPositionOfLastMeasuredCell\",\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: \"getTotalSize\",\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: \"getUpdatedOffsetForIndex\",\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === void 0 ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: \"getVisibleCellRange\",\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: \"resetCell\",\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: \"_binarySearch\",\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (currentOffset === offset) {\n          return middle;\n        } else if (currentOffset < offset) {\n          low = middle + 1;\n        } else if (currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"_exponentialSearch\",\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: \"_findNearestCell\",\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error(\"Invalid offset \".concat(offset, \" specified\"));\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n  return CellSizeAndPositionManager;\n}();\n\nexports[\"default\"] = CellSizeAndPositionManager;"],"mappings":"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"},"metadata":{},"sourceType":"script"}