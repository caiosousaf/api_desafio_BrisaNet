{"ast":null,"code":"var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\n\n\nfunction slice(array, start, end) {\n  var length = array == null ? 0 : array.length;\n\n  if (!length) {\n    return [];\n  }\n\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  } else {\n    start = start == null ? 0 : toInteger(start);\n    end = end === undefined ? length : toInteger(end);\n  }\n\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;","map":{"version":3,"names":["baseSlice","require","isIterateeCall","toInteger","slice","array","start","end","length","undefined","module","exports"],"sources":["/home/brisa/Documentos/api_desafio_BrisaNet/FrontEnd/node_modules/lodash/slice.js"],"sourcesContent":["var baseSlice = require('./_baseSlice'),\n    isIterateeCall = require('./_isIterateeCall'),\n    toInteger = require('./toInteger');\n\n/**\n * Creates a slice of `array` from `start` up to, but not including, `end`.\n *\n * **Note:** This method is used instead of\n * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n * returned.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction slice(array, start, end) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n    start = 0;\n    end = length;\n  }\n  else {\n    start = start == null ? 0 : toInteger(start);\n    end = end === undefined ? length : toInteger(end);\n  }\n  return baseSlice(array, start, end);\n}\n\nmodule.exports = slice;\n"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAD5B;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAFvB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,GAA7B,EAAkC;EAChC,IAAIC,MAAM,GAAGH,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBA,KAAK,CAACG,MAAvC;;EACA,IAAI,CAACA,MAAL,EAAa;IACX,OAAO,EAAP;EACD;;EACD,IAAID,GAAG,IAAI,OAAOA,GAAP,IAAc,QAArB,IAAiCL,cAAc,CAACG,KAAD,EAAQC,KAAR,EAAeC,GAAf,CAAnD,EAAwE;IACtED,KAAK,GAAG,CAAR;IACAC,GAAG,GAAGC,MAAN;EACD,CAHD,MAIK;IACHF,KAAK,GAAGA,KAAK,IAAI,IAAT,GAAgB,CAAhB,GAAoBH,SAAS,CAACG,KAAD,CAArC;IACAC,GAAG,GAAGA,GAAG,KAAKE,SAAR,GAAoBD,MAApB,GAA6BL,SAAS,CAACI,GAAD,CAA5C;EACD;;EACD,OAAOP,SAAS,CAACK,KAAD,EAAQC,KAAR,EAAeC,GAAf,CAAhB;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBP,KAAjB"},"metadata":{},"sourceType":"script"}