{"ast":null,"code":"import React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        groupAlign = _cells$i$props.groupAlign,\n        groupVerticalAlign = _cells$i$props.groupVerticalAlign,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType,\n            align = _nextCell$props.align,\n            verticalAlign = _nextCell$props.verticalAlign;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          align: align,\n          verticalAlign: verticalAlign,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          align: groupAlign,\n          verticalAlign: groupVerticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;","map":{"version":3,"names":["React","isFunction","get","isNil","ColumnGroup","HeaderCell","cloneCell","Cell","props","cloneElement","mergeCells","cells","nextCells","i","length","_cells$i$props","width","colSpan","groupCount","groupHeader","groupAlign","groupVerticalAlign","isHeaderCell","headerHeight","groupHeaderHeight","groupChildren","nextWidth","left","j","nextCell","_nextCell$props","nextCellWidth","sortable","children","dataKey","onSortColumn","sortColumn","sortType","align","verticalAlign","removed","push","createElement","key","header","_nextWidth","_j","_nextCell","_nextCell$props2","rowData","rowIndex","_children","colSpanWidth","_isHeaderCell","_dataKey","cellText","undefined"],"sources":["/home/brisa/Documentos/api_desafio_BrisaNet/FrontEnd/node_modules/rsuite-table/es/utils/mergeCells.js"],"sourcesContent":["import React from 'react';\nimport isFunction from 'lodash/isFunction';\nimport get from 'lodash/get';\nimport isNil from 'lodash/isNil';\nimport ColumnGroup from '../ColumnGroup';\nimport HeaderCell from '../HeaderCell';\n\nfunction cloneCell(Cell, props) {\n  return /*#__PURE__*/React.cloneElement(Cell, props);\n}\n\nfunction mergeCells(cells) {\n  var nextCells = [];\n\n  for (var i = 0; i < cells.length; i += 1) {\n    var _cells$i$props = cells[i].props,\n        width = _cells$i$props.width,\n        colSpan = _cells$i$props.colSpan,\n        groupCount = _cells$i$props.groupCount,\n        groupHeader = _cells$i$props.groupHeader,\n        groupAlign = _cells$i$props.groupAlign,\n        groupVerticalAlign = _cells$i$props.groupVerticalAlign,\n        isHeaderCell = _cells$i$props.isHeaderCell,\n        headerHeight = _cells$i$props.headerHeight,\n        groupHeaderHeight = _cells$i$props.groupHeaderHeight;\n    var groupChildren = []; // Add grouping to column headers.\n\n    if (groupCount && isHeaderCell) {\n      var nextWidth = width;\n      var left = 0;\n\n      for (var j = 0; j < groupCount; j += 1) {\n        var nextCell = cells[i + j];\n        var _nextCell$props = nextCell.props,\n            nextCellWidth = _nextCell$props.width,\n            sortable = _nextCell$props.sortable,\n            children = _nextCell$props.children,\n            dataKey = _nextCell$props.dataKey,\n            onSortColumn = _nextCell$props.onSortColumn,\n            sortColumn = _nextCell$props.sortColumn,\n            sortType = _nextCell$props.sortType,\n            align = _nextCell$props.align,\n            verticalAlign = _nextCell$props.verticalAlign;\n\n        if (j !== 0) {\n          nextWidth += nextCellWidth;\n          left += cells[i + j - 1].props.width;\n          cells[i + j] = cloneCell(nextCell, {\n            removed: true\n          });\n        }\n\n        groupChildren.push( /*#__PURE__*/React.createElement(HeaderCell, {\n          key: j,\n          left: left,\n          align: align,\n          verticalAlign: verticalAlign,\n          dataKey: dataKey,\n          width: nextCellWidth,\n          sortable: sortable,\n          sortColumn: sortColumn,\n          sortType: sortType,\n          onSortColumn: onSortColumn\n        }, children));\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: nextWidth,\n        children: /*#__PURE__*/React.createElement(ColumnGroup, {\n          width: nextWidth,\n          headerHeight: headerHeight,\n          header: groupHeader,\n          align: groupAlign,\n          verticalAlign: groupVerticalAlign,\n          groupHeaderHeight: groupHeaderHeight\n        }, groupChildren)\n      }));\n      continue;\n    } else if (colSpan) {\n      // If there is a colSpan attribute, go to its next Cell.\n      // Determine whether the value is null or undefined, then merge this cell.\n      var _nextWidth = width;\n\n      for (var _j = 0; _j < colSpan; _j += 1) {\n        var _nextCell = cells[i + _j];\n\n        if (_nextCell) {\n          var _nextCell$props2 = _nextCell.props,\n              rowData = _nextCell$props2.rowData,\n              rowIndex = _nextCell$props2.rowIndex,\n              _children = _nextCell$props2.children,\n              colSpanWidth = _nextCell$props2.width,\n              _isHeaderCell = _nextCell$props2.isHeaderCell,\n              _dataKey = _nextCell$props2.dataKey;\n          var cellText = isFunction(_children) ? _children(rowData, rowIndex) : get(rowData, _dataKey);\n\n          if (rowData && isNil(cellText) || _isHeaderCell && isNil(_children)) {\n            _nextWidth += colSpanWidth;\n            cells[i + _j] = cloneCell(_nextCell, {\n              removed: true\n            });\n          }\n        }\n      }\n\n      nextCells.push(cloneCell(cells[i], {\n        width: _nextWidth,\n        'aria-colspan': _nextWidth > width ? colSpan : undefined\n      }));\n      continue;\n    }\n\n    nextCells.push(cells[i]);\n  }\n\n  return nextCells;\n}\n\nexport default mergeCells;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;EAC9B,OAAO,aAAaR,KAAK,CAACS,YAAN,CAAmBF,IAAnB,EAAyBC,KAAzB,CAApB;AACD;;AAED,SAASE,UAAT,CAAoBC,KAApB,EAA2B;EACzB,IAAIC,SAAS,GAAG,EAAhB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,IAAI,CAAvC,EAA0C;IACxC,IAAIE,cAAc,GAAGJ,KAAK,CAACE,CAAD,CAAL,CAASL,KAA9B;IAAA,IACIQ,KAAK,GAAGD,cAAc,CAACC,KAD3B;IAAA,IAEIC,OAAO,GAAGF,cAAc,CAACE,OAF7B;IAAA,IAGIC,UAAU,GAAGH,cAAc,CAACG,UAHhC;IAAA,IAIIC,WAAW,GAAGJ,cAAc,CAACI,WAJjC;IAAA,IAKIC,UAAU,GAAGL,cAAc,CAACK,UALhC;IAAA,IAMIC,kBAAkB,GAAGN,cAAc,CAACM,kBANxC;IAAA,IAOIC,YAAY,GAAGP,cAAc,CAACO,YAPlC;IAAA,IAQIC,YAAY,GAAGR,cAAc,CAACQ,YARlC;IAAA,IASIC,iBAAiB,GAAGT,cAAc,CAACS,iBATvC;IAUA,IAAIC,aAAa,GAAG,EAApB,CAXwC,CAWhB;;IAExB,IAAIP,UAAU,IAAII,YAAlB,EAAgC;MAC9B,IAAII,SAAS,GAAGV,KAAhB;MACA,IAAIW,IAAI,GAAG,CAAX;;MAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgCU,CAAC,IAAI,CAArC,EAAwC;QACtC,IAAIC,QAAQ,GAAGlB,KAAK,CAACE,CAAC,GAAGe,CAAL,CAApB;QACA,IAAIE,eAAe,GAAGD,QAAQ,CAACrB,KAA/B;QAAA,IACIuB,aAAa,GAAGD,eAAe,CAACd,KADpC;QAAA,IAEIgB,QAAQ,GAAGF,eAAe,CAACE,QAF/B;QAAA,IAGIC,QAAQ,GAAGH,eAAe,CAACG,QAH/B;QAAA,IAIIC,OAAO,GAAGJ,eAAe,CAACI,OAJ9B;QAAA,IAKIC,YAAY,GAAGL,eAAe,CAACK,YALnC;QAAA,IAMIC,UAAU,GAAGN,eAAe,CAACM,UANjC;QAAA,IAOIC,QAAQ,GAAGP,eAAe,CAACO,QAP/B;QAAA,IAQIC,KAAK,GAAGR,eAAe,CAACQ,KAR5B;QAAA,IASIC,aAAa,GAAGT,eAAe,CAACS,aATpC;;QAWA,IAAIX,CAAC,KAAK,CAAV,EAAa;UACXF,SAAS,IAAIK,aAAb;UACAJ,IAAI,IAAIhB,KAAK,CAACE,CAAC,GAAGe,CAAJ,GAAQ,CAAT,CAAL,CAAiBpB,KAAjB,CAAuBQ,KAA/B;UACAL,KAAK,CAACE,CAAC,GAAGe,CAAL,CAAL,GAAetB,SAAS,CAACuB,QAAD,EAAW;YACjCW,OAAO,EAAE;UADwB,CAAX,CAAxB;QAGD;;QAEDf,aAAa,CAACgB,IAAd,EAAoB,aAAazC,KAAK,CAAC0C,aAAN,CAAoBrC,UAApB,EAAgC;UAC/DsC,GAAG,EAAEf,CAD0D;UAE/DD,IAAI,EAAEA,IAFyD;UAG/DW,KAAK,EAAEA,KAHwD;UAI/DC,aAAa,EAAEA,aAJgD;UAK/DL,OAAO,EAAEA,OALsD;UAM/DlB,KAAK,EAAEe,aANwD;UAO/DC,QAAQ,EAAEA,QAPqD;UAQ/DI,UAAU,EAAEA,UARmD;UAS/DC,QAAQ,EAAEA,QATqD;UAU/DF,YAAY,EAAEA;QAViD,CAAhC,EAW9BF,QAX8B,CAAjC;MAYD;;MAEDrB,SAAS,CAAC6B,IAAV,CAAenC,SAAS,CAACK,KAAK,CAACE,CAAD,CAAN,EAAW;QACjCG,KAAK,EAAEU,SAD0B;QAEjCO,QAAQ,EAAE,aAAajC,KAAK,CAAC0C,aAAN,CAAoBtC,WAApB,EAAiC;UACtDY,KAAK,EAAEU,SAD+C;UAEtDH,YAAY,EAAEA,YAFwC;UAGtDqB,MAAM,EAAEzB,WAH8C;UAItDmB,KAAK,EAAElB,UAJ+C;UAKtDmB,aAAa,EAAElB,kBALuC;UAMtDG,iBAAiB,EAAEA;QANmC,CAAjC,EAOpBC,aAPoB;MAFU,CAAX,CAAxB;MAWA;IACD,CAnDD,MAmDO,IAAIR,OAAJ,EAAa;MAClB;MACA;MACA,IAAI4B,UAAU,GAAG7B,KAAjB;;MAEA,KAAK,IAAI8B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG7B,OAAtB,EAA+B6B,EAAE,IAAI,CAArC,EAAwC;QACtC,IAAIC,SAAS,GAAGpC,KAAK,CAACE,CAAC,GAAGiC,EAAL,CAArB;;QAEA,IAAIC,SAAJ,EAAe;UACb,IAAIC,gBAAgB,GAAGD,SAAS,CAACvC,KAAjC;UAAA,IACIyC,OAAO,GAAGD,gBAAgB,CAACC,OAD/B;UAAA,IAEIC,QAAQ,GAAGF,gBAAgB,CAACE,QAFhC;UAAA,IAGIC,SAAS,GAAGH,gBAAgB,CAACf,QAHjC;UAAA,IAIImB,YAAY,GAAGJ,gBAAgB,CAAChC,KAJpC;UAAA,IAKIqC,aAAa,GAAGL,gBAAgB,CAAC1B,YALrC;UAAA,IAMIgC,QAAQ,GAAGN,gBAAgB,CAACd,OANhC;UAOA,IAAIqB,QAAQ,GAAGtD,UAAU,CAACkD,SAAD,CAAV,GAAwBA,SAAS,CAACF,OAAD,EAAUC,QAAV,CAAjC,GAAuDhD,GAAG,CAAC+C,OAAD,EAAUK,QAAV,CAAzE;;UAEA,IAAIL,OAAO,IAAI9C,KAAK,CAACoD,QAAD,CAAhB,IAA8BF,aAAa,IAAIlD,KAAK,CAACgD,SAAD,CAAxD,EAAqE;YACnEN,UAAU,IAAIO,YAAd;YACAzC,KAAK,CAACE,CAAC,GAAGiC,EAAL,CAAL,GAAgBxC,SAAS,CAACyC,SAAD,EAAY;cACnCP,OAAO,EAAE;YAD0B,CAAZ,CAAzB;UAGD;QACF;MACF;;MAED5B,SAAS,CAAC6B,IAAV,CAAenC,SAAS,CAACK,KAAK,CAACE,CAAD,CAAN,EAAW;QACjCG,KAAK,EAAE6B,UAD0B;QAEjC,gBAAgBA,UAAU,GAAG7B,KAAb,GAAqBC,OAArB,GAA+BuC;MAFd,CAAX,CAAxB;MAIA;IACD;;IAED5C,SAAS,CAAC6B,IAAV,CAAe9B,KAAK,CAACE,CAAD,CAApB;EACD;;EAED,OAAOD,SAAP;AACD;;AAED,eAAeF,UAAf"},"metadata":{},"sourceType":"module"}