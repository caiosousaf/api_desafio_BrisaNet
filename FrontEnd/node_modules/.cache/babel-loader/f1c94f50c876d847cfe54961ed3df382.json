{"ast":null,"code":"var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n/** Used as the internal argument placeholder. */\n\n\nvar PLACEHOLDER = '__lodash_placeholder__';\n/** Used to compose bitmasks for function metadata. */\n\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMin = Math.min;\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\n\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n  var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG; // Exit early if metadata can't be merged.\n\n  if (!(isCommon || isCombo)) {\n    return data;\n  } // Use source `thisArg` if available.\n\n\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2]; // Set when currying a bound function.\n\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  } // Compose partial arguments.\n\n\n  var value = source[3];\n\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  } // Compose partial right arguments.\n\n\n  value = source[5];\n\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  } // Use source `argPos` if available.\n\n\n  value = source[7];\n\n  if (value) {\n    data[7] = value;\n  } // Use source `ary` if it's smaller.\n\n\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  } // Use source `arity` if one is not provided.\n\n\n  if (data[9] == null) {\n    data[9] = source[9];\n  } // Use source `func` and merge bitmasks.\n\n\n  data[0] = source[0];\n  data[1] = newBitmask;\n  return data;\n}\n\nmodule.exports = mergeData;","map":{"version":3,"names":["composeArgs","require","composeArgsRight","replaceHolders","PLACEHOLDER","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_BOUND_FLAG","WRAP_CURRY_FLAG","WRAP_ARY_FLAG","WRAP_REARG_FLAG","nativeMin","Math","min","mergeData","data","source","bitmask","srcBitmask","newBitmask","isCommon","isCombo","length","value","partials","module","exports"],"sources":["/home/brisa/Documentos/GitHub/api_desafio_BrisaNet/FrontEnd/node_modules/lodash/_mergeData.js"],"sourcesContent":["var composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    replaceHolders = require('./_replaceHolders');\n\n/** Used as the internal argument placeholder. */\nvar PLACEHOLDER = '__lodash_placeholder__';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_BOUND_FLAG = 4,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_ARY_FLAG = 128,\n    WRAP_REARG_FLAG = 256;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Merges the function metadata of `source` into `data`.\n *\n * Merging metadata reduces the number of wrappers used to invoke a function.\n * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`\n * may be applied regardless of execution order. Methods like `_.ary` and\n * `_.rearg` modify function arguments, making the order in which they are\n * executed important, preventing the merging of metadata. However, we make\n * an exception for a safe combined case where curried functions have `_.ary`\n * and or `_.rearg` applied.\n *\n * @private\n * @param {Array} data The destination metadata.\n * @param {Array} source The source metadata.\n * @returns {Array} Returns `data`.\n */\nfunction mergeData(data, source) {\n  var bitmask = data[1],\n      srcBitmask = source[1],\n      newBitmask = bitmask | srcBitmask,\n      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);\n\n  var isCombo =\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||\n    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||\n    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));\n\n  // Exit early if metadata can't be merged.\n  if (!(isCommon || isCombo)) {\n    return data;\n  }\n  // Use source `thisArg` if available.\n  if (srcBitmask & WRAP_BIND_FLAG) {\n    data[2] = source[2];\n    // Set when currying a bound function.\n    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;\n  }\n  // Compose partial arguments.\n  var value = source[3];\n  if (value) {\n    var partials = data[3];\n    data[3] = partials ? composeArgs(partials, value, source[4]) : value;\n    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];\n  }\n  // Compose partial right arguments.\n  value = source[5];\n  if (value) {\n    partials = data[5];\n    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;\n    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];\n  }\n  // Use source `argPos` if available.\n  value = source[7];\n  if (value) {\n    data[7] = value;\n  }\n  // Use source `ary` if it's smaller.\n  if (srcBitmask & WRAP_ARY_FLAG) {\n    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);\n  }\n  // Use source `arity` if one is not provided.\n  if (data[9] == null) {\n    data[9] = source[9];\n  }\n  // Use source `func` and merge bitmasks.\n  data[0] = source[0];\n  data[1] = newBitmask;\n\n  return data;\n}\n\nmodule.exports = mergeData;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}