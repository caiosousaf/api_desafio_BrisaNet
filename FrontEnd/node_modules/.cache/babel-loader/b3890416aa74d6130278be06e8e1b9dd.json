{"ast":null,"code":"/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\n\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n\n  return result;\n}\n\nmodule.exports = composeArgs;","map":{"version":3,"names":["nativeMax","Math","max","composeArgs","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersLength","leftIndex","leftLength","rangeLength","result","Array","isUncurried","module","exports"],"sources":["/home/brisa/Documentos/GitHub/api_desafio_BrisaNet/FrontEnd/node_modules/lodash/_composeArgs.js"],"sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates an array that is the composition of partially applied arguments,\n * placeholders, and provided arguments into a single array of arguments.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to prepend to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgs(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersLength = holders.length,\n      leftIndex = -1,\n      leftLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(leftLength + rangeLength),\n      isUncurried = !isCurried;\n\n  while (++leftIndex < leftLength) {\n    result[leftIndex] = partials[leftIndex];\n  }\n  while (++argsIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[holders[argsIndex]] = args[argsIndex];\n    }\n  }\n  while (rangeLength--) {\n    result[leftIndex++] = args[argsIndex++];\n  }\n  return result;\n}\n\nmodule.exports = composeArgs;\n"],"mappings":"AAAA;AACA,IAAIA,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,IAArB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8CC,SAA9C,EAAyD;EACvD,IAAIC,SAAS,GAAG,CAAC,CAAjB;EAAA,IACIC,UAAU,GAAGL,IAAI,CAACM,MADtB;EAAA,IAEIC,aAAa,GAAGL,OAAO,CAACI,MAF5B;EAAA,IAGIE,SAAS,GAAG,CAAC,CAHjB;EAAA,IAIIC,UAAU,GAAGR,QAAQ,CAACK,MAJ1B;EAAA,IAKII,WAAW,GAAGd,SAAS,CAACS,UAAU,GAAGE,aAAd,EAA6B,CAA7B,CAL3B;EAAA,IAMII,MAAM,GAAGC,KAAK,CAACH,UAAU,GAAGC,WAAd,CANlB;EAAA,IAOIG,WAAW,GAAG,CAACV,SAPnB;;EASA,OAAO,EAAEK,SAAF,GAAcC,UAArB,EAAiC;IAC/BE,MAAM,CAACH,SAAD,CAAN,GAAoBP,QAAQ,CAACO,SAAD,CAA5B;EACD;;EACD,OAAO,EAAEJ,SAAF,GAAcG,aAArB,EAAoC;IAClC,IAAIM,WAAW,IAAIT,SAAS,GAAGC,UAA/B,EAA2C;MACzCM,MAAM,CAACT,OAAO,CAACE,SAAD,CAAR,CAAN,GAA6BJ,IAAI,CAACI,SAAD,CAAjC;IACD;EACF;;EACD,OAAOM,WAAW,EAAlB,EAAsB;IACpBC,MAAM,CAACH,SAAS,EAAV,CAAN,GAAsBR,IAAI,CAACI,SAAS,EAAV,CAA1B;EACD;;EACD,OAAOO,MAAP;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBhB,WAAjB"},"metadata":{},"sourceType":"script"}