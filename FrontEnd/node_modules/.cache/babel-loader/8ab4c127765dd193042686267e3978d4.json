{"ast":null,"code":"var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\n\n\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n\n  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n    newValue = srcValue;\n\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      } else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      } else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      } else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      } else {\n        newValue = [];\n      }\n    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      } else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    } else {\n      isCommon = false;\n    }\n  }\n\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;","map":{"version":3,"names":["assignMergeValue","require","cloneBuffer","cloneTypedArray","copyArray","initCloneObject","isArguments","isArray","isArrayLikeObject","isBuffer","isFunction","isObject","isPlainObject","isTypedArray","safeGet","toPlainObject","baseMergeDeep","object","source","key","srcIndex","mergeFunc","customizer","stack","objValue","srcValue","stacked","get","newValue","undefined","isCommon","isArr","isBuff","isTyped","set","module","exports"],"sources":["/home/brisa/Documentos/api_desafio_BrisaNet/FrontEnd/node_modules/lodash/_baseMergeDeep.js"],"sourcesContent":["var assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    safeGet = require('./_safeGet'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = safeGet(object, key),\n      srcValue = safeGet(source, key),\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}